bool isvalid(string s){
    if(s.length()>1 && s[0]=='0'){
        return false;
    }
    int n = s.length(), a = 0;
    for(int i=0; i<n; i++){
        a = (a*10) + (s[i]-'0');
    }
    if(a>=0 && a<256){
        return true;
    }
    return false;
}

vector<string> Solution::restoreIpAddresses(string A) {
    vector<string> ans;
    int n = A.length();
    if(n>12 || n<4){
        return ans;
    }

    for(int i=1; i<4; i++){
        string s1 = A.substr(0,i);
        if(!isvalid(s1))
            continue;
        //cout<<s1<<" ";
        for(int j=1; j<4 && (j+i)<(n-1); j++){
            string s2 = A.substr(i, j);
            if(!isvalid(s2))
                continue;
            //cout<<s2<<" ";
            for(int k=1; k<4 && (i+j+k)<n; k++){
                string s3 = A.substr(i+j, k);
                if(!isvalid(s3))
                    continue;
                //cout<<s3<<" ";
                string s4 = A.substr(i+j+k);
                if(!isvalid(s4))
                    continue;
                //cout<<s4<<" ";
                string ans_string = s1+'.'+s2+'.'+s3+'.'+s4;
                ans.push_back(ans_string);
                //cout<<endl;
            }
        }
    }
    
    return ans;
}
