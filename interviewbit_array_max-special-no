int Solution::maxSpecialProduct(vector<int> &A) {
    int n = A.size();
    int left[n], right[n];
    stack<int> s1, s2;
    
    
    
    for(int i=0; i<n; i++){
        while(!s1.empty() && A[i]>s1.top()){
            right[s2.top()] = i;
            s1.pop();
            s2.pop();
        }
        s1.push(A[i]);
        s2.push(i);
    }
    while(!s1.empty()){
        right[s2.top()] = 0;
        s1.pop();
        s2.pop();
    }
    
    
    for(int i=(n-1); i>=0; i--){
        while(!s1.empty() && A[i]>s1.top()){
            left[s2.top()] = i;
            s1.pop();
            s2.pop();
        }
        s1.push(A[i]);
        s2.push(i);
    }
    while(!s1.empty()){
        left[s2.top()] = 0;
        s1.pop();
        s2.pop();
    }
    
    long long int ans= 0;
    for(int i=0; i<n; i++){
        long long int a = (long long)(left[i])*(long long)(right[i]);
        if(a>ans){
            ans = a;
        }
    }
    
    return ans%(1000000007);
}
