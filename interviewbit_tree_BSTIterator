/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

stack<TreeNode*> s;

BSTIterator::BSTIterator(TreeNode *root) {
    TreeNode* node = root;
    stack<TreeNode*> s1;
    s.swap(s1);
    while(node){
        s.push(node);
        node = node->left;
    }
}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() {
    if(s.empty()){
        return false;
    }
    return true;
}

/** @return the next smallest number */
int BSTIterator::next() {
    TreeNode* node = s.top();
    int value = node->val;
    s.pop();
    node = node->right;
    while(node){
        s.push(node);
        node = node->left;
    }
    return value;
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
