struct Node{
    int val;
    struct Node* next;
    Node(int d){
        this->val=d;
        this->next=NULL;
    }
};

class stackk{
    struct Node* top=NULL;
    void push(int d){
        struct Node* n=new Node(d);
        n->next=top;
        top=n;
    }
    int pop(){
        int v=top->val;
        top=top->next;
        return v;
    }
    int topp(){
        return top->val;
    }
    bool empty(){
        return top==NULL;
    }
};

int Solution::largestRectangleArea(vector<int> &A) {
    stackk s;
    int left[A.size()], right[A.size()];
    int i=0, j=A.size()-1;
    while(j>=0){
        while(!s.empty() && A[j]<A[s.topp()]){
            left[s.pop()]=j;
        }
        s.push(j);
        j--;
    }
    while(!s.empty()){
        left[s.pop()]=-1;
    }
    
    while(i<A.size()){
        while(!s.empty() && A[i]<A[s.topp()]){
            right[s.pop()]=i;
        }
        s.push(i);
        i++;
    }
    while(!s.empty()){
        right[s.pop()]=A.size();
    }
    
    int ans=INT_MIN;
    for(i=0; i<A.size(); i++){
        ans=max(ans, (right[i]-left[i]-1)*A[i]);
    }
    return ans;
}


int Solution::largestRectangleArea(vector<int> &A) {
    stack<int> s;
    int left[A.size()], right[A.size()];
    int i=0, j=A.size()-1;
    while(j>=0){
        while(!s.empty() && A[j]<A[s.top()]){
            left[s.top()]=j;
            s.pop();
        }
        s.push(j);
        j--;
    }
    while(!s.empty()){
        left[s.top()]=-1;
        s.pop();
    }
    
    while(i<A.size()){
        while(!s.empty() && A[i]<A[s.top()]){
            right[s.top()]=i;
            s.pop();
        }
        s.push(i);
        i++;
    }
    while(!s.empty()){
        right[s.top()]=A.size();
        s.pop();
    }
    
    int ans=INT_MIN;
    for(i=0; i<A.size(); i++){
        ans=max(ans, (right[i]-left[i]-1)*A[i]);
    }
    return ans;
}
