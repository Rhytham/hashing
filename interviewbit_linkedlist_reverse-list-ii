/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::reverseBetween(ListNode* A, int B, int C) {
    if(A==NULL || B==C){
        return A;
    }
    ListNode* temp=A;
    int i=1;
    while(i<(B-1)){
        temp=temp->next;
        i++;
    }
    ListNode* t1=temp;
    temp=temp->next;
    ListNode* t4=temp, *t3;
    ListNode* t2=NULL;
    if(B==1){
        t1->next=NULL;
        t2=t1;
    }
    while(i<C){
        t3=temp->next;
        temp->next=t2;
        t2=temp;
        temp=t3;
        i++;
    }
    if(B==1){
        if(t3){
            t1->next=t3;
        }
        return t2;
    }
    t1->next=t2;
    t4->next=t3;
    
    return A;
}



class Solution {
public:
 
    // Reverses the linkedList which starts from head, and extends to size nodes. 
    // Returns the end node. 
    // Also sets the head->next as endNode->next. 
    ListNode *reverseLinkedList(ListNode *head, int size) {
    if (size <= 1) return head; 
        ListNode *cur = head, *nextNode = head->next, *tmp;

    for (int i = 0; i < (size - 1); i++) {
        tmp = nextNode->next;
        nextNode->next = cur; 
        cur = nextNode;
        nextNode = tmp; 
    }

    head->next = nextNode;
    return cur;
    }

    ListNode *reverseBetween(ListNode *head, int m, int n) {
    // Introduce dummyhead to not handle corner cases. 
    ListNode* dummyHead = new ListNode(0); 
    dummyHead->next = head; 

    // Figure out the start node of the sublist we are going to reverse
      ListNode* prev = dummyHead;
    ListNode* cur = head; 
    int index = 1;
    while (index < m) {
        prev = cur;
        cur = cur->next;
        index++;
    }

    // At this point, we have start of sublist in cur, prev of startSubList in prev.
    // Lets reverse the sublist now. 
    ListNode* endSubList = reverseLinkedList(cur, n - m + 1);
    prev->next = endSubList; 

    return dummyHead->next;
    }
};
