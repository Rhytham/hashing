/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::preorderTraversal(TreeNode* A) {
    vector<int> ans;
    stack<TreeNode*> s;
    TreeNode* node = A;
    s.push(node);
    while(!s.empty()){
        node = s.top();
        s.pop();
        ans.push_back(node->val);
        if(node->right){
            s.push(node->right);
        }
        if(node->left){
            s.push(node->left);
        }
    }
    return ans;
}


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::inorderTraversal(TreeNode* A) {
    vector<int> ans;
    struct TreeNode* node = A;
    stack<struct TreeNode*> s;
    
    while(!s.empty() || node!=NULL){
        //cout<<"!"<<node->val<<endl;
        while(node!=NULL){
            s.push(node);
            node=node->left;
        }
        node = s.top();
        //cout<<node->val<<endl;
        s.pop();
        ans.push_back(node->val);
        node = node->right;
    }

    return ans;
}


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::postorderTraversal(TreeNode* A) {
    vector<int> ans;
    stack<TreeNode*> s;
    TreeNode* node = A;
    s.push(node);

    while(!s.empty()){
        node = s.top();
        if(node->right && node->left){
            s.pop();
            s.push(node->right);
            s.push(node);
            s.push(node->left);
        }else if(node->right){
            s.push(node->right);
        }else if(node->left){
            s.push(node->left);
        }else{
            while(!s.empty()){
                node = s.top();
                s.pop();
                if(node->right && !s.empty() && node->right==s.top()){
                    s.pop();
                    s.push(node);
                    s.push(node->right);
                    break;
                }
                ans.push_back(node->val);
            }
        }
    }

    return ans;
}
class Solution {
    public:
        vector<int> postorderTraversal(TreeNode *root) {
            stack<TreeNode*> nodeStack;
            vector<int> result;
            //base case
            if(root==NULL)
                return result;
            nodeStack.push(root);
            while(!nodeStack.empty()) {
                TreeNode* node= nodeStack.top();  
                result.push_back(node->val);
                nodeStack.pop();
                if(node->left)
                    nodeStack.push(node->left);
                if(node->right)
                    nodeStack.push(node->right);
            }
            reverse(result.begin(),result.end());
            return result;

        }
};
