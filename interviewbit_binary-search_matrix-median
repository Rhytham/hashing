int calc(vector<int> &A, int target, int m){
    int low=0;
    int high=m-1;
    while(low<=high){
        int mid = (low+high)/2;
        if(A[mid]<=target){
            if(mid==m-1){
                return m;
            }
            if(A[mid+1]>target){
                return mid+1;
            }
            low = mid+1;
        }else{
            if(mid==0){
                return 0;
            }
            high = mid-1;
        }
    }
    return m;
}


int findMedian(vector<vector<int> > &A) {
    int n = A.size();
    int m = A[0].size();
    int min = A[0][0], max = A[0][m-1];

    for(int i=1;i<n;i++){
        if(A[i][0] < min){
            min = A[i][0];
        }else if(A[i][m-1] > max){
            max = A[i][m-1];
        }
    }

    int req = (n*m + 1)/2;

    while(min  < max){
        int sum = 0;
        int mid = (min+max)/2;
        cout<<"mid="<<mid<<endl;
        for(int i=0;i<n;i++){
            sum += calc(A[i], mid, m);
            cout<<"sum="<<sum<<endl;
        }
        if(sum>=req){
            max = mid;
        }else{
            min = mid+1;
        }
        cout<<sum<<" "<<min<<" "<<max<<endl;
    }
    return max;
}
