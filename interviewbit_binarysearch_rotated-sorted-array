int findp(const vector<int> &A){
    int n = A.size();
    int low = 0, high = (n-1);
    while(low<=high){
        int mid = (low+high)/2;
        if( (mid>0 && A[mid]>A[mid-1]) && (mid<(n-1) && A[mid]>A[mid+1]) ){
            return mid;
        } else if(A[mid]>A[high]){
            low = mid+1;
        } else if(A[mid]<A[low]){
            high = mid-1;
        } else{
            return -1;
        }
    }
    return -1;
}

int Solution::search(const vector<int> &A, int B) {
    int n = A.size();
    int piv = findp(A);
    //cout<<piv<<endl;
    int low = 0, high = (n-1);
    
    while(low<=high){
        int mid = (low+high)/2;
        int m = (piv+mid+1)%n;
        if(A[m]==B){
            return m;
        } else if(A[m]>B){
            high = mid-1;
        } else{
            low = mid+1;
        }
    }
      
    return -1;
    
}
